# This config file should live in the same directory as shotgun_io.py. 
# Alternately, it can live at /etc/shotgun_io.conf. shotgun_io.py will
# look for shotgun_io.conf first in the same directory, then in /etc/.

# ----------------------------------------------------------------
# SHOTGUN SERVER INFO
# ----------------------------------------------------------------
[shotgun]
url: https://rush.shotgunstudio.com
script_name: rush
application_key: 6b9b9fd56e8b6ce34bdb35db52f18c983bc536c8 

# ----------------------------------------------------------------
# VERSION FIELDS
# ----------------------------------------------------------------
[version_fields]
# Field mapping for data to Version entity fields
# 
# Define what field each piece of information will be stored in inside
# of Shotgun. Each option shows the default value in the comment preceding
# the setting. Some of these data items already have a default field on the 
# Version entity for storing the info. Others do not and would require you
# set them manually and optionally create new fields to store them.
#
# If you don't want to store a particular piece of information, simply leave
# it empty.
# no_value_here: 
# 
# The Shotgun fields specified below must be configured as valid data types.  
# We list the valid types in the comments preceding each entry.
# 
# 
# The Version name provided by the Artist in the submit dialog. 
# (Example: demo_100_010_anim_v001)
# Valid data types: text
# ** REQUIRED **
# name: code
name: code

# Optional description provided by the Artist in the submit dialog. 
# (Example: 'fixed penetration in left column')
# Valid data types: text
# description: description
description: description

# Entity the submitted Version is for and will be linked to in Shotgun.
# Valid data types: entity (Shot,Asset)
# ** REQUIRED **
# shot: entity
shot: entity

# Status of the render job. The status will be translated and updated
# in Shotgun on the Version entity. See the 'version_status' section below.
# Valid data types: status_list, list, text
# job_status: sg_status_list
job_status: sg_status_list

# Full path to the location of rendered frames in sequence notation (ie. 
# /path/to/frames.#.jpg) where available. Not all renderers provide this info
# by default.
# Valid data types: text
# frames_path: sg_path_to_frames
frames_path: sg_path_to_frames

# Full path to the location of the proxy movie (ex. /path/to/movie.mov) 
# Valid data types: text
# movie_path: sg_path_to_movie
movie_path: sg_path_to_movie

# if 'movie_path' is a file/link field, setting this to 'yes'
# will upload the proxy movie to store in Shotgun instead of
# linking to it locally.
# This has no effect if the 'movie_path' field is not a 
#file/link (url) field.
# @@ UNIMPLEMENTED @@
upload_movie: no

# Lowest frame number rendered by the job.
# Valid data types: number, float, text
# first_frame: sg_first_frame
first_frame: sg_first_frame

# Highest frame number rendered by the job.
# Valid data types: number, float, text
# last_frame: sg_last_frame
last_frame: sg_last_frame

# Count of all of the rendered frames in the job.
# Valid data types: number, float, text
# frame_count: frame_count
frame_count: frame_count

# Frame range specified in the render job. This can be a simple format (eg. 1-100)
# a complex format (eg. 1-100,2) or a mixture of formats separated by a single
# space (eg. 1-100,2 200 300 351-400)
# Valid data types: text
# frame_range: frame_range
frame_range: frame_range

# User who submitted the job and is creating the Version in Shotgun
# Valid data types: entity (HumanUser)
# ** REQUIRED **
# user: user
user: user

# Project the Version is linked to in Shotgun.
# Valid data types: entity (Project)
# ** REQUIRED **
# project: project
project: project

# Render manager assigned Job id of the job
# Valid data types: text
# job_id: sg_job_id
job_id: sg_job_id

# Task in Shotgun to link the Version to. This is an optional but highly
# recommended workflow used to track the Versions generated for each Task.
# Valid data types: entity (Task)
# ** HIGHLY RECOMMENDED **
# task: sg_task
task: sg_task

# Total render time in seconds (wall clock time) to complete job
# Valid data types: float, number, text
# total_render_time: sg_total_render_time
total_render_time: sg_total_render_time

# Average render time per frame in seconds 
# Valid data types: float, number, text
# avg_frame_time: sg_avg_frame_time
avg_frame_time: sg_avg_frame_time



# ----------------------------------------------------------------
# VERSION VALUES
# ----------------------------------------------------------------
[version_values]
# Field mapping for data to Version entity fields
# Comma-separated Version name templates to present to the Artist in the 
# submit dialog dropdown menu. 
# The first entry in this list will be selected
# by default. If you don't want to specify a default, Insert a comma at the 
# beginning of the list (eg. , ${project}_${shot}_${task}_v, ...)
# 
# You can use the following tokens for automatic 
# string replacement where available:
#   ${project} - The name of the Project the Version is linked to
#   ${shot} - The display name of the Shot or Asset the Version is for
#   ${task} - The name of the Task linked to the Version
#   ${user} - login of the user creating the Version
#   ${jobid} - the job id of the render job
# 
# version_name_templates: ${project} / ${shot} / ${task} / ${user}, ${project}_${shot}_${task}_${user}, ${project} ${shot} ${task} ${jobid}, ${shot}_${task} ${jobid}
version_name_templates: ${project} / ${shot} / ${task} / ${user}, ${project}_${shot}_${task}_${user}, ${project} ${shot} ${task} ${jobid}, ${shot}_${task} ${jobid}

# If you want to replace spaces in the Version name, set this to True and
# provide the version_name_space_token below
version_name_replace_spaces: yes

# If you want to replace spaces in the Version name with another character, specify
# it here. Leave this blank to simply remove spaces.
version_name_space_token: _

# If you want to force Version names to be all lowercase, set this to 'yes'
version_name_force_lowercase: yes

# Controls how Shotgun automatically adds Version numbers to submitted Versions.
# 'task' will increment Version #s per Task:
#    MyProject_100_010_bglayout_v1
#    MyProject_100_010_anim_v1
#    MyProject_100_010_bglayout_v2
#    ...
# 'pipeline_step' will increment Version #s per Pipeline Step:
#    MyProject_100_010_layout_v1
#    MyProject_100_010_anim_v1
#    MyProject_100_010_layout_v2
#    ...
# 'global' will increment Version #s independent of Task so there will only be
# a single Version with that # (MyProject_100_010_layout_v1, 
#    MyProject_100_010_layout_v1
#    MyProject_100_010_anim_v2
#    MyProject_100_010_layout_v3
#    ...
# Valid values: task, pipeline_step, global
version_numbering: task

# formatting for version number
# standard string formating tokens go here as well as any
# standard plain string suffixes
version_number_format: _v%03d

# regexes for trying to automatically match project and shot in scenefile path
# each regex pattern must have 2 groups. The first will always be the project
# the second must be the shot/asset
#
# If a match is found for the Project and Shot/Asset, shotgun_io will lookup
# the Tasks for the user for that Shot/Asset. If there is a single Task, that
# Task will be the default Task selected in the submit UI. Otherwise the menu
# will display all active Tasks for that user.
scenefile_path_regexes: ^/\w*/\w*/\w*/\w*/(\w*)/(\w*), ^/\w*/\w*/something/\w*/(\w*)/(\w*)
# @@@UNIMPLEMENTED@@@
#scenefile_path_project_field: name
# @@@UNIMPLEMENTED@@@
#scenefile_path_shot_field: code

# If a value is provided for frames_path, shotgun_io will automatically attempt
# to upload a thumbnail for the Version. Shotgun will attemtp to generate the 
# thumbnail on the server and supports most formats (note that .exr formats
# don't currently work but we're working on that)
# Valid options are: first, middle, last
thumbnail_frame: middle

# When a job is first submitted, the Version is created in Shotgun with this
# status. Must be the short code of a valid enabled status value for the field 
# specified for job_status above.
# status_submitted: na
status_submitted: qd

# When a job is started, the associated Version record in Shotgun will be updated
# with this status value. Must be the short code of a valid enabled status value 
# for the field specified for job_status above.
# status_ip: na
status_ip: ren

# When a job is finishes without error, the associated Version record in Shotgun
# will be updated with this status value. Must be the short code of a valid 
# enabled status value for the field specified for job_status above.
# status_complete: rev
status_complete: rev

# When a job is finishes with errors, the associated Version record in Shotgun
# will be updated with this status value. Must be the short code of a valid 
# enabled status value for the field specified for job_status above.
# status_failed: na
status_failed: fail


# ----------------------------------------------------------------
# ADVANCED
# ----------------------------------------------------------------
[advanced]
# Custom module activation
#
# You may subclass ShotgunIOBase and override any of the methods in
# it as a custom module. Specify the module name here (ie. without
# the .py extention). This file must be in the same directory as 
# shotgun_io.py (or in your $PYTHONPATH).
# custom_module: shotgun_io_custom
custom_module: 

# @@unimplemented@@
#input: default
# @@unimplemented@@
#output: default

# The workflow defines how the artist will choose the Shotgun entity the
# submitted job is for. The default workflow is by task. The artist will choose
# the Task they are working on for this job and the Version created will be
# linked to the entity the Task is linked to. The advanced workflow adds menu
# options for the artist to manually select the Project and Shot/Asset the job
# is for. 
#
# valid options: task (default), project_shot
workflow: task

